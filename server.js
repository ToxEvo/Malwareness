const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const User = require('./model/user');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const SECRET = 'rFaMtMlQ0CHAQK0VDUT7mYMlRDGCp9sh$3Q1';

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/malwareness-db');

const app = express();
app.use('/', express.static(path.join(__dirname, 'static')));
app.use(bodyParser.json());

// Registration endpoint
app.post('/api/register', async (req, res) => {
    const { username, password: plainTextPassword } = req.body;

    if (!username || typeof username !== 'string') {
        return res.json({ status: 'error', error: 'Invalid username' });
    }

    if (!plainTextPassword || typeof plainTextPassword !== 'string') {
        return res.json({ status: 'error', error: 'Invalid password' });
    }

    if (plainTextPassword.length < 6) {
        return res.json({
            status: 'error',
            error: 'Password too short. Should be at least 6 characters.'
        });
    }

    const password = await bcrypt.hash(plainTextPassword, 10);

    try {
        const response = await User.create({
            username,
            password
        });
        console.log('User created successfully: ', response);
    } catch (error) {
        if (error.code === 11000) {
            // duplicate key
            return res.json({ status: 'error', error: 'Username already in use' });
        }
        throw error;
    }

    res.json({ status: 'ok' });
});

// Login endpoint
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;
    const user = await User.findOne({ username }).lean();

    if (!user) {
        return res.json({ status: 'error', error: 'Invalid username/password' });
    }

    if (await bcrypt.compare(password, user.password)) {

        const token = jwt.sign(
            {
                id: user._id,
                username: user.username
            },
            SECRET
        );

        return res.json({ status: 'ok', data: token });
    }

    res.json({ status: 'error', error: 'Invalid username/password' });
});

// Get user info endpoint
app.get('/api/user', async (req, res) => {
    const token = req.headers['x-access-token'];

    try {
        const decoded = jwt.verify(token, SECRET);
        const user = await User.findOne({ _id: decoded.id }).lean();
        return res.json({
            status: 'ok',
            username: user.username,
            score: user.score,
            dateCreated: user.dateCreated
        });
    } catch (error) {
        return res.json({ status: 'error', error: 'Invalid token' });
    }
});

// Logout endpoint
app.post('/api/logout', (req, res) => {
    return res.json({ status: 'ok' });
});

// Increment user score endpoint
app.post('/api/increment-score', async (req, res) => {
    const token = req.headers['x-access-token'];
    const { points } = req.body;

    try {
        const decoded = jwt.verify(token, SECRET);
        const user = await User.findOne({ _id: decoded.id });
        user.score += points;
        await user.save();
        return res.json({
            status: 'ok',
            newScore: user.score
        });
    } catch (error) {
        return res.json({ status: 'error', error: 'Invalid token or failed to increment score' });
    }
});

// Simple message endpoint
app.get('/message', (req, res) => {
    res.send('Hello from the server!');
});

// Start the server
app.listen(9000, () => {
    console.log('Server is running on http://localhost:9000');
});